{"version":3,"sources":["components/counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","count","i","HandleClickAdd","bind","HandleClickSub","HandleClickStart","HandleClickReset","this","setState","console","log","timer","setInterval","Count","clearInterval","alert","class","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAiHeA,E,kDA7Gb,aACC,IAAD,8BACE,gBACKC,MAAO,CACVC,MAAQ,GACRC,EAAI,GAIP,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBACxB,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBAXzB,E,6DAgBCI,KAAKC,SAAS,CAACR,MAAQO,KAAKR,MAAMC,MAAQ,M,yCAG3C,IAAD,OAAoB,GAAhBO,KAAKR,MAAME,IAEZQ,QAAQC,IAAI,iBAEbH,KAAKC,SAAS,CACZP,EAAI,IAIFM,KAAKR,MAAMC,MAAM,IACpBO,KAAKI,MAAQC,aAAY,kBAAM,EAAKC,UAAS,OAE1B,GAAhBN,KAAKR,MAAME,IACZQ,QAAQC,IAAI,gBACdI,cAAcP,KAAKI,OACnBJ,KAAKC,SAAS,CACZR,MAAOO,KAAKR,MAAMC,QAEpBO,KAAKC,SAAS,CACZP,EAAI,O,8BASNM,KAAKC,SAAS,CACZR,MAAOO,KAAKR,MAAMC,MAAQ,IAExBO,KAAKR,MAAMC,MAAQ,IACrBc,cAAcP,KAAKI,OACrBJ,KAAKC,SAAS,CAAER,MAAQ,O,uCAKxBS,QAAQC,IAAI,cACZH,KAAKC,SAAS,CAACR,MAAQO,KAAKR,MAAMC,MAAQ,IACtCO,KAAKR,MAAMC,OAAS,IAEtBO,KAAKC,SAAS,CACdR,MAAO,KAGTe,MAAM,mB,yCAKRR,KAAKC,SAAS,CACZR,MAAO,GACPC,EAAI,M,+BAMN,OACE,8BACE,yBAAKe,MAAQ,aACb,wCAGA,6BACGT,KAAKR,MAAMC,OAEd,6BACE,4BAAQiB,QAAWV,KAAKL,gBAAxB,QAIF,6BACE,4BAAQe,QAAWV,KAAKH,gBAAxB,QAGF,6BACE,4BAAQa,QAAWV,KAAKF,kBAAxB,eAGF,6BACE,4BAAQY,QAAWV,KAAKD,kBAAxB,gB,GAxGcY,aCQPC,MANf,WACE,OACA,6BAAK,kBAAC,EAAD,QCMaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.1125cece.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass Counter extends Component\r\n{\r\n  constructor()\r\n  {\r\n    super()\r\n    this.state ={\r\n      count : 10,\r\n      i : 1}\r\n    //  bool = 'true'\r\n   \r\n   \r\n   this.HandleClickAdd = this.HandleClickAdd.bind(this)\r\n   this.HandleClickSub = this.HandleClickSub.bind(this)\r\n   this.HandleClickStart = this.HandleClickStart.bind(this)\r\n   this.HandleClickReset = this.HandleClickReset.bind(this)\r\n   \r\n }\r\n HandleClickAdd()\r\n {\r\n   this.setState({count : this.state.count + 1})\r\n }\r\n HandleClickStart()\r\n {if(this.state.i != 0)\r\n  {\r\n    console.log('Counter start')\r\n  \r\n   this.setState({\r\n     i : 0\r\n   });\r\n  \r\n\r\n    if(this.state.count>0)\r\n    this.timer = setInterval(() => this.Count(), 1000);\r\n  }\r\n    if(this.state.i == 0) \r\n    { console.log('Counter stop');\r\n    clearInterval(this.timer);\r\n    this.setState({\r\n      count: this.state.count\r\n    });\r\n    this.setState({\r\n      i : 1\r\n    });\r\n    }\r\n    \r\n   \r\n }\r\n\r\n Count()\r\n {  \r\n    this.setState({\r\n      count: this.state.count - 1\r\n    })\r\n    if (this.state.count < 1){ \r\n      clearInterval(this.timer);\r\n    this.setState({ count : 0})}\r\n }\r\n\r\n HandleClickSub()\r\n  {\r\n    console.log('sub called')\r\n    this.setState({count : this.state.count - 1})\r\n    if( this.state.count <= 0)\r\n    {\r\n      this.setState({\r\n      count: 10,\r\n\r\n    })\r\n    alert('Out of time!')\r\n    }\r\n  }\r\nHandleClickReset()\r\n {\r\n  this.setState({\r\n    count: 10,\r\n    i : 1\r\n  })\r\n   \r\n }\r\n\r\nrender(){\r\n  return(\r\n    <body>\r\n      <div class = \"container\">\r\n      <div>\r\n        Counter\r\n      </div>\r\n      <div>\r\n        {this.state.count}\r\n      </div>\r\n      <div>\r\n        <button onClick = {this.HandleClickAdd}>\r\n          ADD\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button onClick = {this.HandleClickSub}>\r\n        SUB</button>\r\n      </div>\r\n      <div>\r\n        <button onClick = {this.HandleClickStart}>\r\n        START/STOP</button>\r\n      </div>\r\n      <div>\r\n        <button onClick = {this.HandleClickReset}>\r\n        RESET</button>\r\n      </div>\r\n      </div>\r\n    </body>\r\n  )}\r\n}\r\nexport default Counter","import React from 'react';\n import './App.css';\nimport Counter from './components/counter'\n\nfunction App() {\n  return (\n  <div><Counter/></div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}